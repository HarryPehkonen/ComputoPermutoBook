[chapter]
number = 1
title = "Why JSON Transformation Matters"
description = "An introduction to the problem space and the Computo/Permuto solution for JSON transformations"

[chapter.learning_objectives]
primary = "Understand JSON transformation challenges and the Computo/Permuto solution"
secondary = [
    "Recognize common transformation scenarios",
    "Understand Computo vs Permuto roles",
    "See benefits of declarative transformation"
]

[chapter.prerequisites]
knowledge = ["JSON syntax", "Basic programming concepts", "API development experience"]
tools = []

[[sections]]
title = "Common JSON Transformation Challenges"
content = """
JSON transformation is everywhere in modern development:

**API Aggregation:** Combine data from multiple microservices with different structures into a single response.

**Configuration Management:** Generate environment-specific config files from templates.

**Data Normalization:** Clean up messy third-party API data with inconsistent formats.

**Dynamic Payloads:** Build different API payloads for various service providers from common data.

Traditionally, you'd write imperative code to loop through data and manually build objects. This mixes transformation logic with business logic and is often verbose and error-prone.
"""

[[sections]]
title = "The Computo/Permuto Solution"
content = """
Computo and Permuto form a two-layer system for JSON transformation:

**Permuto: Declarative Templating**
Smart "mail merge" for JSON. Fills in template placeholders with values from context data.

*Example:* `{"user_id": "${/user/id}"}`

**Computo: Programmatic Logic**
Safe, sandboxed logic engine with conditionals, iteration, calculations, and variables.

*Example:* `["if", <condition>, <then_expr>, <else_expr>]`
"""

[[sections]]
title = "Combining Logic and Templates"
content = """
The power emerges when you combine them - using Computo's logic to decide how and when to apply Permuto's templates.

**Example:** User profile generation
- Computo's `if` checks if user is active
- If true, applies Permuto template to generate full profile
- If false, returns simple error object

The transformation becomes a clean JSON script you can store, version, and execute safely.
"""

[[sections]]
title = "What's Next"
content = """
This guide covers:

- **Environment setup**
- **Computo and Permuto fundamentals**
- **Building sophisticated data pipelines**

By the end, you'll have a powerful tool for JSON transformation in modern development.
""" 