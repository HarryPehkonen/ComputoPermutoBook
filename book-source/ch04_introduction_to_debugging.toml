[chapter]
number = 4
title = "Introduction to Debugging"
description = "Essential debugging skills to see inside your transformations and understand what's happening"

[chapter.learning_objectives]
primary = "Master essential debugging techniques to understand and troubleshoot Computo scripts"
secondary = [
    "Use execution tracing to see the flow of operations",
    "Apply basic performance profiling to identify bottlenecks", 
    "Read and interpret error messages effectively",
    "Watch variables and data flow through transformations",
    "Format output for better readability during development"
]

[chapter.prerequisites]
knowledge = ["Basic Computo operators", "JSON structure", "Command-line usage"]
tools = ["Computo installed", "Basic familiarity with CLI flags"]

[[sections]]
title = "Debugging Essentials"
content = """
Computo provides debugging tools to see inside your transformations:

- **Execution tracing** - See how your script processes data
- **Performance profiling** - Identify expensive operations
- **Error messages** - Understand what went wrong
- **Variable watching** - Track data flow through transformations
"""

[[sections]]
title = "Execution Tracing"
content = """
Execution tracing shows which operations are executed and in what order.

**Usage:**
```bash
computo --trace script.json input.json
```

**Shows:**
- Each operator call with arguments
- Results of each operation
- Nested operation flow with indentation
- Variable bindings and lookups

Trace output goes to stderr, results to stdout.
"""

[[sections]]
title = "Performance Profiling"
content = """
Profiling helps identify which operations take time.

**Usage:**
```bash
computo --profile script.json input.json
```

**Look For:**
- Operations taking longer than others
- Repeated expensive operations
- Memory-intensive operations

**Tips:**
- `reduce` is generally faster than multiple `map` calls
- Avoid deeply nested operations
- Consider dataset size with `filter` and `map`
"""

[[sections]]
title = "Error Messages"
content = """
Computo provides detailed error messages that pinpoint issues.

**Common Error Types:**
- **Path errors**: JSON pointers that don't exist
- **Type errors**: Wrong data types for operations
- **Operator errors**: Invalid arguments
- **Structure errors**: Malformed JSON or syntax

**Error Message Components:**
- **Location**: Which part of script caused error
- **Context**: What data was being processed
- **Suggestion**: Hints about what went wrong
"""

[[sections]]
title = "Variable Watching"
content = """
Watch how data flows through transformations with `let` expressions.

**Variable Inspection:**
See values assigned to each variable and how they're used.

**Data Flow Tracing:**
- Watch array transformations step by step
- See intermediate results in calculations
- Understand nested operation data flow

**Best Practices:**
- Use meaningful variable names
- Break complex operations into named steps
- Watch how data changes shape
"""

[[sections]]
title = "Output Formatting"
content = """
Use readable output while debugging.

**Pretty Printing:**
```bash
computo --pretty=2 script.json input.json
```

**Combining Flags:**
```bash
# Trace with pretty output
computo --trace --pretty=2 script.json input.json

# Profile with readable results
computo --profile --pretty=2 script.json input.json
```

**Workflow:**
1. Start with pretty output
2. Add tracing to understand flow
3. Add profiling for performance
4. Use plain output for production
"""


# Essential debugging examples for beginners
[[examples]]
name = "basic_tracing"
description = "Basic execution tracing to see operation flow"
script = '''[
  "let", 
  [
    ["x", 10],
    ["y", 32]
  ],
  ["+", ["$", "/x"], ["$", "/y"]]
]'''
expected = { result = 42 }
cli_flags = ["--trace", "--pretty=2"]
notes = "Watch how let binding creates variables and how they're accessed"

[[examples]]
name = "array_operation_tracing"
description = "Trace array operations to understand iteration"
script = '''[
  "map",
  {"array": [1, 2, 3, 4]},
  ["lambda", ["x"], ["*", ["$", "/x"], 2]]
]'''
expected = { result = [2, 4, 6, 8] }
cli_flags = ["--trace"]
notes = "See how map processes each array element individually"

[[examples]]
name = "performance_profiling"
description = "Basic performance profiling to identify slow operations"
script = '''[
  "reduce",
  {"array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},
  ["lambda", ["acc", "x"], ["+", ["$", "/acc"], ["*", ["$", "/x"], ["$", "/x"]]]],
  0
]'''
expected = { result = 385 }
cli_flags = ["--profile", "--pretty=2"]
notes = "See timing information for each operation"

[[examples]]
name = "variable_watching"
description = "Watch variable creation and usage in complex expressions"
script = '''[
  "let",
  [
    ["numbers", {"array": [5, 10, 15]}],
    ["multiplier", 3]
  ],
  [
    "map",
    ["$", "/numbers"],
    ["lambda", ["n"], ["*", ["$", "/n"], ["$", "/multiplier"]]]
  ]
]'''
expected = { result = [15, 30, 45] }
cli_flags = ["--trace", "--pretty=2"]
notes = "Watch how variables are bound and accessed in nested operations"

[[examples]]
name = "error_demonstration"
description = "Demonstrate clear error messages for common mistakes"
script = '''[
  "obj",
  ["safe_value", ["+", 20, 22]],
  ["message", "This works fine"]
]'''
expected = { safe_value = 42, message = "This works fine" }
cli_flags = ["--pretty=2"]
notes = "Example of successful execution - compare with error cases you encounter"

[[examples]]
name = "nested_operation_flow"
description = "Trace complex nested operations to understand execution order"
script = '''[
  "obj",
  ["total", [
    "reduce",
    ["filter", {"array": [1, 2, 3, 4, 5, 6]}, ["lambda", ["x"], [">", ["$", "/x"], 3]]],
    ["lambda", ["sum", "x"], ["+", ["$", "/sum"], ["$", "/x"]]],
    0
  ]],
  ["count", ["filter", {"array": [1, 2, 3, 4, 5, 6]}, ["lambda", ["x"], [">", ["$", "/x"], 3]]]]
]'''
expected = { total = 18, count = 3 }
cli_flags = ["--trace"]
notes = "See how nested filter and reduce operations execute step by step" 