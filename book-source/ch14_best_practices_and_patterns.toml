[chapter]
number = 14
title = "Best Practices and Patterns"
description = "Essential patterns for writing maintainable, efficient Computo and Permuto transformations"

[chapter.learning_objectives]
primary = "Apply core best practices for creating production-ready transformation scripts"
secondary = [
    "Separate logic from presentation effectively",
    "Organize code with clear structure and naming",
    "Implement defensive programming and error handling",
    "Design reusable transformation patterns"
]

[chapter.prerequisites]
knowledge = ["All previous chapters", "Performance optimization", "Error handling", "Advanced array operations"]
tools = ["Computo CLI", "Permuto CLI", "Version control system", "Text editor"]

[[sections]]
title = "Separate Logic from Presentation"
content = """
## The Two-Phase Approach

**Phase 1: Data Logic (Computo)**
- Data extraction, validation, and computation
- Array processing and aggregations
- Clean context preparation

**Phase 2: Presentation (Permuto)**
- Template application and string interpolation
- Structure definition and output formatting

## Example: API Response Transformation

### Poor Practice: Mixed Logic and Presentation
```json
// Anti-pattern: Logic mixed with presentation
["permuto.apply",
  {
    "user_greeting": "Hello ${/name}${/is_premium ? ', Premium Member' : ''}",
    "account_status": "${/account/balance > 0 ? 'Active' : 'Suspended'}",
    "recommendations": "${/purchases.length > 5 ? 'VIP Recommendations' : 'Standard Recommendations'}"
  },
  ["$input"]
]
```

### Best Practice: Clean Separation
```json
// Computo: Pure logic and data preparation
["let", [
    ["user", ["get", ["$input"], "/user"]],
    ["account", ["get", ["$input"], "/account"]],
    ["purchases", ["get", ["$input"], "/purchases"]]
  ],
  ["permuto.apply",
    {
      "user_greeting": "Hello ${/name}${/premium_suffix}",
      "account_status": "${/account_status}",
      "recommendations": "${/recommendation_tier}"
    },
    ["obj",
      ["name", ["get", ["$", "/user"], "/name"]],
      ["premium_suffix", ["if", ["get", ["$", "/user"], "/is_premium"], ", Premium Member", ""]],
      ["account_status", ["if", [">", ["get", ["$", "/account"], "/balance"], 0], "Active", "Suspended"]],
      ["recommendation_tier", ["if", [">", ["count", ["$", "/purchases"]], 5], "VIP Recommendations", "Standard Recommendations"]]
    ]
  ]
]
```

## Benefits
- **Testability**: Logic can be tested independently
- **Reusability**: Same logic drives multiple output formats
- **Maintainability**: Business logic changes don't affect templates
- **Performance**: Complex logic runs once, template applies cleanly
"""

[[sections]]
title = "Code Organization"
content = """
## Directory Structure

```
project/
├── scripts/
│   ├── data-processing/
│   ├── api-transforms/
│   └── templates/
├── shared/
│   ├── common-functions.json
│   ├── validation-rules.json
│   └── constants.json
├── tests/
│   ├── unit/
│   └── integration/
└── docs/
```

## Reusable Components

**shared/validation-rules.json:**
```json
["obj",
  ["is_valid_email", ["lambda", ["email"],
    ["and", ["!=", ["$", "/email"], ""], ["get", ["$", "/email"], "@"]]
  ]],
  ["safe_get", ["lambda", ["obj", "path", "default"],
    ["if", ["get", ["$", "/obj"], ["$", "/path"]],
      ["get", ["$", "/obj"], ["$", "/path"]],
      ["$", "/default"]
    ]
  ]]
]
```

## Naming Conventions

**Script Files:**
- Use descriptive names: `process-user-orders.json`
- Group by domain: `user-*`, `order-*`, `analytics-*`

**Variables:**
```json
// Good: Descriptive names
["let", [
    ["active_premium_users", ["filter", ["$", "/users"], ["$", "/is_premium"]]],
    ["monthly_revenue", ["reduce", ["$", "/orders"], ["$", "/sum_values"], 0]]
  ],
  // ...
]

// Poor: Abbreviated names
["let", [
    ["apu", ["filter", ["$", "/users"], ["$", "/ipa"]]],
    ["mrs", ["reduce", ["$", "/orders"], ["$", "/sov"], 0]]
  ],
  // ...
]
```

"""


[[sections]]
title = "Defensive Programming"
content = """
Write robust transformations that handle edge cases gracefully.

## Input Validation Strategies

### Input Validation

```json
["let", [
    ["has_structure", ["and", ["get", ["$input"], "/data"], ["get", ["$input"], "/metadata"]]],
    ["data_is_array", ["==", ["type", ["get", ["$input"], "/data"]], "array"]],
    ["has_minimum_data", [">", ["count", ["get", ["$input"], "/data"]], 0]],
    ["input_valid", ["and", ["$", "/has_structure"], ["$", "/data_is_array"], ["$", "/has_minimum_data"]]]
  ],
  ["if", ["$", "/input_valid"],
    ["process_valid_input", ["$input"]],
    ["obj", ["error", "invalid_input"], ["details", "Missing required structure"]]
  ]
]
```

### Safe Navigation

```json
["let", [
    ["safe_get", ["lambda", ["obj", "path", "default"],
      ["if", ["get", ["$", "/obj"], ["$", "/path"]],
        ["get", ["$", "/obj"], ["$", "/path"]],
        ["$", "/default"]
      ]
    ]]
  ],
  ["obj",
    ["user_name", ["$", "/safe_get"], ["$input"], "/user/name", "Unknown"],
    ["order_count", ["$", "/safe_get"], ["$input"], "/orders", []]
  ]
]
```

## Error Recovery

### Graceful Degradation

```json
["let", [
    ["primary", ["get", ["$input"], "/primary"]],
    ["fallback", ["get", ["$input"], "/fallback"]]
  ],
  ["if", ["$", "/primary"],
    ["process_primary", ["$", "/primary"]],
    ["if", ["$", "/fallback"],
      ["process_fallback", ["$", "/fallback"]],
      ["obj", ["status", "degraded"], ["message", "No data available"]]
    ]
  ]
]
```

"""

[[sections]]
title = "Performance Patterns"
content = """
Key patterns for efficient transformations.

## Caching Expensive Operations

```json
["let", [
    // Build lookup tables once
    ["user_lookup", ["reduce", ["get", ["$input"], "/users"],
      ["lambda", ["acc", "user"],
        ["merge", ["$", "/acc"], ["obj", [["get", ["$", "/user"], "/id"], ["$", "/user"]]]]
      ], {}
    ]],
    
    // Use lookups for fast access
    ["enriched_orders", ["map", ["get", ["$input"], "/orders"],
      ["lambda", ["order"],
        ["let", [["user_id", ["get", ["$", "/order"], "/user_id"]]],
          ["obj",
            ["order_id", ["get", ["$", "/order"], "/id"]],
            ["user_name", ["get", ["$", "/user_lookup"], ["concat", "/", ["$", "/user_id"]], "/name"]]
          ]
        ]
      ]
    ]]
  ],
  ["$", "/enriched_orders"]
]
```

## Memory-Efficient Processing

```json
// Use reduce for aggregation instead of loading everything
["reduce", ["get", ["$input"], "/large_dataset"],
  ["lambda", ["acc", "item"],
    ["if", ["meets_criteria", ["$", "/item"]],
      ["update_accumulator", ["$", "/acc"], ["$", "/item"]],
      ["$", "/acc"]
    ]
  ],
  ["create_initial_accumulator"]
]
```
"""

[chapter.summary]
content = """
You have mastered essential best practices for creating production-ready transformations.

**Core Principles:**
- **Logic/Presentation Separation**: Clean boundaries between data processing and output formatting
- **Code Organization**: Structured layouts and modular design
- **Defensive Programming**: Robust error handling and validation
- **Performance Optimization**: Memory-efficient processing patterns

**Key Checklist:**
1. ✅ Separate Computo logic from Permuto presentation
2. ✅ Use descriptive names and clear structure
3. ✅ Implement input validation
4. ✅ Apply defensive patterns
5. ✅ Optimize for performance

**Next**: Chapter 15 explores multiple input processing and JSON Patch operations.
"""

[[examples]]
name = "modular_validation_system"
description = "Demonstrate a reusable validation system with shared components"
section = "general"
tutorial_text = "This example shows how to create modular validation components that can be reused across multiple transformation scripts."

script = ["let", [
    ["validation_rules", ["obj",
      ["is_valid_email", ["lambda", ["email"],
        ["and",
          ["!=", ["$", "/email"], ""],
          [">", ["count", ["$", "/email"]], 5]
        ]
      ]],
      ["is_valid_user", ["lambda", ["user"],
        ["and",
          ["get", ["$", "/user"], "/id"],
          ["get", ["$", "/user"], "/name"],
          ["$", "/is_valid_email"], ["get", ["$", "/user"], "/email"]
        ]
      ]],
      ["safe_get", ["lambda", ["obj", "path", "default"],
        ["if", ["get", ["$", "/obj"], ["$", "/path"]],
          ["get", ["$", "/obj"], ["$", "/path"]],
          ["$", "/default"]
        ]
      ]]
    ]],
    ["users", ["get", ["$input"], "/users"]],
    ["validated_users", ["filter", ["$", "/users"], ["$", "/validation_rules"], "/is_valid_user"]]
  ],
  ["obj",
    ["validation_summary", ["obj",
      ["total_users", ["count", ["$", "/users"]]],
      ["valid_users", ["count", ["$", "/validated_users"]]],
      ["validation_rate", ["/", ["count", ["$", "/validated_users"]], ["count", ["$", "/users"]]]]
    ]],
    ["valid_users", ["map", ["$", "/validated_users"],
      ["lambda", ["user"],
        ["obj",
          ["id", ["get", ["$", "/user"], "/id"]],
          ["name", ["get", ["$", "/user"], "/name"]],
          ["email", ["get", ["$", "/user"], "/email"]],
          ["status", "validated"]
        ]
      ]
    ]]
  ]
]

input = '''
{
  "users": [
    {"id": 1, "name": "Alice", "email": "alice@example.com"},
    {"id": 2, "name": "Bob", "email": ""},
    {"id": 3, "name": "", "email": "charlie@example.com"},
    {"id": 4, "name": "Diana", "email": "diana@example.com"}
  ]
}
'''

expected = '''
{
  "validation_summary": {
    "total_users": 4,
    "valid_users": 2,
    "validation_rate": 0.5
  },
  "valid_users": [
    {"id": 1, "name": "Alice", "email": "alice@example.com", "status": "validated"},
    {"id": 4, "name": "Diana", "email": "diana@example.com", "status": "validated"}
  ]
}
'''

notes = "The modular validation system allows for reusable validation rules that can be shared across multiple scripts, improving maintainability and consistency."
cli_flags = ["--pretty=2"]

[[examples]]
name = "defensive_data_processing"
description = "Demonstrate defensive programming patterns for robust data processing"
section = "general"
tutorial_text = "This example shows how to implement defensive programming patterns that gracefully handle missing or invalid data."

script = ["let", [
    ["safe_array_process", ["lambda", ["arr", "processor", "default"],
      ["if", ["and", ["!=", ["$", "/arr"], ""], ["==", ["type", ["$", "/arr"]], "array"]],
        ["if", [">", ["count", ["$", "/arr"]], 0],
          ["map", ["$", "/arr"], ["$", "/processor"]],
          []
        ],
        ["$", "/default"]
      ]
    ]],
    ["safe_number_operation", ["lambda", ["val", "operation", "default"],
      ["if", ["and", ["!=", ["$", "/val"], ""], ["==", ["type", ["$", "/val"]], "number"]],
        ["$", "/operation"], ["$", "/val"],
        ["$", "/default"]
      ]
    ]],
    ["input_data", ["get", ["$input"], "/data"]],
    ["metadata", ["get", ["$input"], "/metadata"]]
  ],
  ["obj",
    ["processing_result", ["if", ["$", "/input_data"],
      ["$", "/safe_array_process"], 
      ["$", "/input_data"],
      ["lambda", ["item"],
        ["obj",
          ["id", ["if", ["get", ["$", "/item"], "/id"], ["get", ["$", "/item"], "/id"], "unknown"]],
          ["value", ["$", "/safe_number_operation"], 
            ["get", ["$", "/item"], "/value"], 
            ["lambda", ["v"], ["*", ["$", "/v"], 2]], 
            0
          ],
          ["status", "processed"]
        ]
      ],
      []
    ]],
    ["metadata_summary", ["if", ["$", "/metadata"],
      ["obj",
        ["source", ["if", ["get", ["$", "/metadata"], "/source"], ["get", ["$", "/metadata"], "/source"], "unknown"]],
        ["version", ["if", ["get", ["$", "/metadata"], "/version"], ["get", ["$", "/metadata"], "/version"], "1.0"]],
        ["processed_at", "2024-01-15T12:00:00Z"]
      ],
      ["obj", ["source", "unknown"], ["version", "1.0"], ["processed_at", "2024-01-15T12:00:00Z"]]
    ]],
    ["processing_stats", ["obj",
      ["items_processed", ["if", ["$", "/input_data"], ["count", ["$", "/input_data"]], 0]],
      ["has_metadata", ["!=", ["$", "/metadata"], ""]],
      ["processing_mode", "defensive"]
    ]]
  ]
]

input = '''
{
  "data": [
    {"id": 1, "value": 10},
    {"id": 2, "value": "invalid"},
    {"id": null, "value": 20},
    {"id": 4, "value": 30}
  ],
  "metadata": {
    "source": "api-v2",
    "version": "2.1.0"
  }
}
'''

expected = '''
{
  "processing_result": [
    {"id": 1, "value": 20, "status": "processed"},
    {"id": 2, "value": 0, "status": "processed"},
    {"id": "unknown", "value": 40, "status": "processed"},
    {"id": 4, "value": 60, "status": "processed"}
  ],
  "metadata_summary": {
    "source": "api-v2",
    "version": "2.1.0",
    "processed_at": "2024-01-15T12:00:00Z"
  },
  "processing_stats": {
    "items_processed": 4,
    "has_metadata": true,
    "processing_mode": "defensive"
  }
}
'''

notes = "The defensive processing pattern handles various edge cases: invalid data types, null values, and missing metadata, ensuring the script never fails unexpectedly."
cli_flags = ["--pretty=2"] 