[chapter]
number = 12
title = "Performance and Optimization"
description = "Master performance optimization techniques for production-grade Computo and Permuto transformations"

[chapter.learning_objectives]
primary = "Write high-performance transformations that scale efficiently"
secondary = [
    "Master 'let' for eliminating redundant computations",
    "Apply lazy evaluation with conditional logic", 
    "Optimize pipeline ordering for performance",
    "Handle deep nesting efficiently"
]

[chapter.prerequisites]
knowledge = ["Advanced array operations", "Complex nested transformations", "Template-driven patterns"]
tools = ["Computo CLI", "Performance monitoring tools"]

[[sections]]
title = "Strategic Use of let"
content = """
The most important optimization in Computo is strategic use of `let` to eliminate redundant computations.

## Performance Impact

Consider this common anti-pattern where the same expensive operation is repeated:

```json
["obj",
  ["user_name", ["get", ["get", ["$input"], "/users"], "/current_user"], "/name"]],
  ["user_email", ["get", ["get", ["$input"], "/users"], "/current_user"], "/email"]],
  ["user_role", ["get", ["get", ["$input"], "/users"], "/current_user"], "/role"]],
  ["user_department", ["get", ["get", ["$input"], "/users"], "/current_user"], "/department"]]
]
```

Here, `["get", ["$input"], "/users"]` is evaluated four times, and the user lookup is repeated four times.

## The Optimized Approach

Using `let` strategically eliminates all redundant computations:

```json
["let", [
    ["users", ["get", ["$input"], "/users"]],
    ["current_user", ["get", ["$", "/users"], "/current_user"]]
  ],
  ["obj",
    ["user_name", ["get", ["$", "/current_user"], "/name"]],
    ["user_email", ["get", ["$", "/current_user"], "/email"]],
    ["user_role", ["get", ["$", "/current_user"], "/role"]],
    ["user_department", ["get", ["$", "/current_user"], "/department"]]
  ]
]
```

**Benefits:**
- Expensive operations executed once
- Intermediate results cached
- Self-documenting variable names

**When to use let:**
- Complex expressions used multiple times
- Expensive calculations or array operations
- Any expression copied more than once
"""

[[sections]]
title = "Lazy Evaluation"
content = """
Computo's `if` operator uses lazy evaluation - only executing the branch that's actually taken.

## Anti-Pattern: Pre-Computing Everything

```json
["let", [
    ["expensive_report", ["reduce",
      ["map", ["get", ["$input"], "/data"], 
        ["lambda", ["item"], ["complex_calculation", ["$", "/item"]]]
      ],
      ["lambda", ["acc", "val"], ["merge", ["$", "/acc"], ["$", "/val"]]],
      {}
    ]],
    ["simple_summary", ["obj", 
      ["count", ["count", ["get", ["$input"], "/data"]]],
      ["status", "basic"]
    ]]
  ],
  ["if", ["get", ["$input"], "/user/wants_detailed_report"],
    ["$", "/expensive_report"],
    ["$", "/simple_summary"]
  ]
]
```

**Problem**: Both branches are computed even though only one is used.

## Optimized: Lazy Computation

```json
["if", ["get", ["$input"], "/user/wants_detailed_report"],
  ["reduce",
    ["map", ["get", ["$input"], "/data"], 
      ["lambda", ["item"], ["complex_calculation", ["$", "/item"]]]
    ],
    ["lambda", ["acc", "val"], ["merge", ["$", "/acc"], ["$", "/val"]]],
    {}
  ],
  ["obj", 
    ["count", ["count", ["get", ["$input"], "/data"]]],
    ["status", "basic"]
  ]
]
```

**Benefit**: Only the needed computation is performed.

**Key principle**: Move expensive computations inside the `if` branches that need them.
"""

[[sections]]
title = "Pipeline Ordering"
content = """
The order of operations dramatically impacts performance. **Filter early to reduce data volume.**

## Anti-Pattern

Consider extracting names of active users from a large dataset:

```json
["map",
  ["filter",
    ["map", ["get", ["$input"], "/users"],
      ["lambda", ["u"], 
        ["obj",
          ["name", ["get", ["$", "/u"], "/profile/name"]],
          ["email", ["get", ["$", "/u"], "/contact/email"]],
          ["active", ["get", ["$", "/u"], "/status/active"]],
          ["department", ["get", ["$", "/u"], "/org/department"]]
        ]
      ]
    ],
    ["lambda", ["u"], ["get", ["$", "/u"], "/active"]]
  ],
  ["lambda", ["u"], ["get", ["$", "/u"], "/name"]]
]
```

**Problems:**
- Creates objects for ALL users first
- Then filters most of them out
- Wastes memory on discarded objects

## Optimized Pipeline

```json
["map",
  ["filter", ["get", ["$input"], "/users"],
    ["lambda", ["u"], ["get", ["$", "/u"], "/status/active"]]
  ],
  ["lambda", ["u"], ["get", ["$", "/u"], "/profile/name"]]
]
```

**Improvements:**
- With 10,000 users, 100 active: Original processes 10,000 â†’ 100. Optimized processes 100.
- Memory usage reduced by ~90%

**Rule: Filter as early as possible.**

### Multi-Stage Filtering
```json
["let", [
    ["users", ["get", ["$input"], "/users"]],
    ["active_users", ["filter", ["$", "/users"], ["lambda", ["u"], ["get", ["$", "/u"], "/active"]]]],
    ["recent_users", ["filter", ["$", "/active_users"], ["lambda", ["u"], ["get", ["$", "/u"], "/recent"]]]]
  ],
  ["map", ["$", "/recent_users"], ["lambda", ["u"], ["get", ["$", "/u"], "/name"]]]
]
```
"""

[[sections]]
title = "Deep Nesting"
content = """
Computo handles arbitrarily deep nesting without stack overflow concerns.

## Deep Conditional Logic

```json
["let", [
    ["user", ["get", ["$input"], "/user"]],
    ["account", ["get", ["$input"], "/account"]]
  ],
  ["if", ["get", ["$", "/user"], "/active"],
    ["if", ["get", ["$", "/account"], "/verified"],
      ["if", [">", ["get", ["$", "/account"], "/balance"], 100],
        ["obj", ["status", "approved"]],
        ["obj", ["status", "insufficient_funds"]]
      ],
      ["obj", ["status", "unverified"]]
    ],
    ["obj", ["status", "inactive"]]
  ]
]
```

**Benefits:**
- No stack overflow with deep nesting
- Consistent performance regardless of depth
- Reliable for complex business logic
"""

[chapter.summary]
content = """
You've mastered essential performance optimization techniques:

**Key Strategies:**
- **Strategic `let`**: Eliminate redundant computations
- **Lazy evaluation**: Use `if` to defer expensive operations
- **Pipeline optimization**: Filter early to reduce data volume
- **Deep nesting**: Handle complex logic without stack concerns

**Rules:**
1. Use `let` for repeated expressions
2. Move expensive computations inside `if` branches
3. Filter data as early as possible
4. Don't worry about nesting depth

**Next**: Chapter 13 covers error handling and debugging.
"""

[[examples]]
name = "let_optimization_comparison"
description = "Compare performance impact of redundant vs optimized expressions"
section = "general"
tutorial_text = "Compare redundant vs optimized expressions using let bindings."

script = ["obj",
  ["inefficient_total", ["+",
    ["*", ["get", ["$input"], "/price"], ["get", ["$input"], "/quantity"]],
    ["*", ["*", ["get", ["$input"], "/price"], ["get", ["$input"], "/quantity"]], 0.08]
  ]],
  ["optimized_total", ["let", [
      ["price", ["get", ["$input"], "/price"]],
      ["quantity", ["get", ["$input"], "/quantity"]],
      ["subtotal", ["*", ["$", "/price"], ["$", "/quantity"]]],
      ["tax", ["*", ["$", "/subtotal"], 0.08]]
    ],
    ["+", ["$", "/subtotal"], ["$", "/tax"]]
  ]]
]

input = { price = 29.99, quantity = 3 }

expected = { inefficient_total = 97.1676, optimized_total = 97.1676 }

notes = "Both produce the same result, but optimized version avoids redundant calculations."
cli_flags = ["--pretty=2"]

[[examples]]
name = "pipeline_ordering_optimization"
description = "Compare inefficient vs optimized pipeline ordering for array operations"
section = "general"
tutorial_text = "Show performance impact of filtering before mapping."

script = ["let", [
    ["users", ["get", ["$input"], "/users"]],
    ["active_threshold", ["get", ["$input"], "/active_days_threshold"]]
  ],
  ["obj",
    ["optimized_pipeline", ["map",
      ["filter", ["$", "/users"],
        ["lambda", ["user"], [">", ["get", ["$", "/user"], "/last_active_days"], ["$", "/active_threshold"]]]
      ],
      ["lambda", ["user"], 
        ["obj",
          ["name", ["get", ["$", "/user"], "/name"]],
          ["department", ["get", ["$", "/user"], "/department"]],
          ["activity_score", ["*", ["get", ["$", "/user"], "/last_active_days"], 10]]
        ]
      ]
    ]],
    ["pipeline_stats", ["obj",
      ["total_users", ["count", ["$", "/users"]]],
      ["active_users", ["count", 
        ["filter", ["$", "/users"],
          ["lambda", ["user"], [">", ["get", ["$", "/user"], "/last_active_days"], ["$", "/active_threshold"]]]
        ]
      ]]
    ]]
  ]
]

input = '''
{
  "active_days_threshold": 7,
  "users": [
    {"name": "Alice", "department": "Engineering", "last_active_days": 1},
    {"name": "Bob", "department": "Marketing", "last_active_days": 15},
    {"name": "Carol", "department": "Engineering", "last_active_days": 30},
    {"name": "David", "department": "Sales", "last_active_days": 5}
  ]
}
'''

expected = '''
{
  "optimized_pipeline": [
    {"name": "Bob", "department": "Marketing", "activity_score": 150},
    {"name": "Carol", "department": "Engineering", "activity_score": 300}
  ],
  "pipeline_stats": {
    "total_users": 4,
    "active_users": 2
  }
}
'''

notes = "Optimized pipeline filters first (4 to 2 users), then maps only remaining items."
cli_flags = ["--pretty=2"] 